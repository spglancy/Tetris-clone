body {
  width: 100vw;
  height: 100vh;
  margin: 0;
  padding: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

#root, .App {
  min-height: 100vh;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

/* App */
.App {

  display: grid;
  width: 100vw;

  grid-gap: 10px;
  /* Defines three columns of `--col-side`, `--col-center`, and `--col-side` widths. */
  grid-template-columns: 1fr calc(var(--tile-size)*10) 1fr;
  /* Defines three rows of `100px`, `--grid-height`, and 100px. */
  grid-template-rows: 100px var(--grid-height) 100px;

/* This defines the areas on the grid with names: 'h', 'l', 'c', 'r',
and 'b'. The '.' represents an empty cell on the grid. */
  grid-template-areas: "h h h"
                       "l c r"
                       "b b b";
}

@media (max-width: 768px) {
  /* .App {
    grid-template-columns: 1fr calc(var(--tile-size)*10);
    grid-template-rows: 100px calc(var(--grid-height)/2) calc(var(--grid-height)/2) 100px;
    grid-template-areas: "h h"
                         "l c"
                         "r c"
                         ". b";
  } */
  .App {
    grid-template-columns: 1fr 2fr;
    grid-template-rows: 50px 65px var(--grid-size) 50px;
    grid-template-areas: "h h"
                         "l r"
                         "c c"
                         "b b"
  }
}

.App-header {
  grid-area: h;
  background-color: #282c34;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

:root {
  --bg-color: rgba(150, 150, 150, 1);
  /* Border Colors are all transparent colors. These will tint or shade the background color of the square. */
  --border-left-color: rgba(255, 255, 255, 0.20);
  --border-top-color: rgba(255, 255, 255, 0.33);
  --border-right-color: rgba(0, 0, 0, 0.15);
  --border-bottom-color: rgba(0, 0, 0, 0.5);

  /* Square Colors:  background colors for the squares.*/
  --color-0: #eaeaea;
  --color-1: #ff6600;
  --color-2: #eec900;
  --color-3: #0000ff;
  --color-4: #cc00ff;
  --color-5: #00ff00;
  --color-6: #66ccff;
  --color-7: #ff0000;

  /* Button Colors */
  --button-color-t: rgba(200, 200, 200, 1);
  --button-color-r: rgba(150, 150, 150, 1);
  --button-color-b: rgba(120, 120, 120, 1);
  --button-color-l: rgba(222, 222, 222, 1);

  /* Numbers define values that will be used throughout the CSS.
  --tile-size: 20px for example will set size of the grid squares. */
  --cols: 10;
  --rows: 18;
  --tile-size: 20px;
}

/* Colors */
.color-0 {
  background-color: var(--color-0);
}

.color-1 {
  background-color: var(--color-1);
}

.color-2 {
  background-color: var(--color-2);
}

.color-3 {
  background-color: var(--color-3);
}

.color-4 {
  background-color: var(--color-4);
}

.color-5 {
  background-color: var(--color-5);
}

.color-6 {
  background-color: var(--color-6);
}

.color-7 {
  background-color: var(--color-7);
}

/* Grid Square */
.grid-square {
  border-style: solid;
  width: var(--tile-size);
  height: var(--tile-size);
  border-width: 1px;
  border-left-color: var(--border-left-color);
  border-top-color: var(--border-top-color);
  border-right-color: var(--border-right-color);
  border-bottom-color: var(--border-bottom-color);
}

/* tells the browser to calculate the size boxes to include the border width rather than adding the border, which is the default */
* {
  box-sizing: border-box;
}

/* Grid Board - This defines the `grid-board` to display as `grid`. This causes the children of this element to arrange on a grid. The number of columns is set by `--cols` var and the width of each column is set by `--tile-size`. These two CSS custom properties are defined in `:root` which allow them to be easily changed.*/
.grid-board {
  display: grid;
  grid-template-columns: repeat(var(--cols), var(--tile-size));
  grid-gap: 0;
  align-self: flex-start;
  grid-area: c;
  margin: auto;
}

/* Next Block */
.next-block {
  display: grid;
  grid-template-columns: repeat(4, var(--tile-size));
  align-self: flex-start;
  grid-area: l;
  margin: 10px;
  justify-self: flex-end;
}

/* Score Board */
.score-board {
  grid-area: r;
  display: flex;
  flex-direction: column;
  justify-content: space-around;
  align-content: center;
  height: 60%;
  width: 90%;
  margin: 10px;
  justify-self: flex-start;
  text-align: left;
}

@media (max-width: 768px) {
  .score-board {
    flex-direction: row;
  }
}

.score-board-button {
  padding: 15px;
  height: max-content;
  width: max-content;
  border: 1px solid rgb(62, 115, 230);
  color: rgb(62, 115, 230);
  background: white;
  font-weight: 600;
  border-radius: 5px;
}

/* controls */
.controls {
  grid-area: b;
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

@media (min-width: 769px) {
  .controls {
    width: 30%;
    margin: auto;
  }
}

.control-button {
  width: max-content;
  height: max-content;
  padding: 15px;
  border-radius: 5px;
  border: 1px solid rgb(62, 115, 230);
  color: rgb(62, 115, 230);
  background: white;
  font-size: 1em;
  font-weight: 600;
}

@media (max-width: 768px) {
  .controls {
    width: 80%;
    margin: auto;
  }

  .control-button {
    font-size: .7em;
  }
}

/* Message Popup - These styles apply to the `MessagePopup` container. With `position:absolute` this element can be placed anywhere on the screen, `left, top, transform:translate` perform this function.*/
.message-popup {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: calc(var(--tile-size) * 10);
  height: calc(var(--tile-size) * 10);
  background-color: rgba(255, 255, 255, 0.5);
  text-align: center;
}

/* This style is applied only when the message popup container
has both `message-popup` class and the `hidden` class. In this
case the Message Popup is not displayed */
.message-popup.hidden {
  display: none;
}