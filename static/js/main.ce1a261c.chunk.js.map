{"version":3,"sources":["actions/index.js","utils/index.js","reducers/gameReducer.js","reducers/index.js","components/gridSquare.js","components/gridBoard.js","components/nextBlock.js","components/scoreboard.js","components/controls.js","components/messagePopup.js","App.js","serviceWorker.js","index.js"],"names":["moveRight","type","moveLeft","rotate","moveDown","pause","resume","restart","gridDefault","array","row","push","col","canMoveTo","shape","grid","x","y","rotation","currentShape","shapes","length","proposedX","proposedY","possibleRow","undefined","randomShape","min","max","Math","floor","random","defaultState","nextShape","isRunning","score","speed","gameOver","gameReducer","state","arguments","action","newRotation","nextRotation","Object","objectSpread","maybeY","obj","blockOffGrid","block","newGrid","toConsumableArray","addBlockToGrid","newState","completedRows","indexOf","splice","unshift","Array","fill","checkRows","reducers","combineReducers","game","GridSquare","classes","concat","this","props","color","react_default","a","createElement","className","Component","GridBoard","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","lastUpdateTime","progressTime","window","requestAnimationFrame","update","bind","time","deltaTime","_this$props","blockColor","map","rowArray","square","blockX","blockY","k","gridSquare","key","makeGrid","connect","NextBlock","ScoreBoard","onClick","e","Controls","MessagePopup","message","isHidden","store","createStore","App","es","gridBoard","nextBlock","scoreboard","controls","messagePopup","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mRASaA,EAAY,WACvB,MAAO,CAAEC,KAPe,eAUbC,EAAW,WACtB,MAAO,CAAED,KAZe,cAebE,EAAS,WACpB,MAAO,CAAEF,KAde,WAiBbG,EAAW,WACtB,MAAO,CAAEH,KAjBe,cAoBbI,EAAQ,WACnB,MAAO,CAAEJ,KA1Be,UA6BbK,EAAS,WACpB,MAAO,CAAEL,KA7Be,WAgCbM,EAAU,WACrB,MAAO,CAAEN,KA3Be,oBCHbO,EAAc,WAIzB,IAHA,IAEMC,EAAQ,GACNC,EAAM,EAAGA,EAHJ,GAGgBA,IAAO,CAClCD,EAAME,KAAK,IACX,IAAI,IAAIC,EAAM,EAAGA,EAJN,GAIkBA,IAC3BH,EAAMC,GAAKC,KAAK,GAOpB,OAAOF,GASII,EAAY,SAACC,EAAOC,EAAMC,EAAGC,EAAGC,GAG3C,IAFA,IAAMC,EAAeC,EAAON,GAAOI,GAE1BR,EAAM,EAAGA,EAAMS,EAAaE,OAAQX,IACzC,IAAK,IAAIE,EAAM,EAAGA,EAAMO,EAAaT,GAAKW,OAAQT,IAE9C,GAA+B,IAA3BO,EAAaT,GAAKE,GAAY,CAE9B,IAAMU,EAAYV,EAAMI,EAElBO,EAAYb,EAAMO,EACxB,GAAIM,EAAY,EACZ,SAGJ,IAAMC,EAAcT,EAAKQ,GAEzB,IAAIC,EAOA,OAAO,EALP,QAA+BC,IAA3BD,EAAYF,IAAuD,IAA3BE,EAAYF,GAEpD,OAAO,EAQ3B,OAAO,GAIIF,EAAS,CAEpB,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,IAER,CAAC,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,GACP,CAAC,EAAE,EAAE,EAAE,KAGT,CAAC,C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","file":"static/js/main.ce1a261c.chunk.js","sourcesContent":["export const PAUSE      = \"PAUSE\"       // Pause the game\nexport const RESUME     = \"RESUME\"      // Resume a paused game\nexport const MOVE_LEFT  = \"MOVE_LEFT\"   // Move piece left\nexport const MOVE_RIGHT = \"MOVE_RIGHT\"  // Move piece right\nexport const ROTATE     = \"ROTATE\"      // Rotate piece\nexport const MOVE_DOWN  = \"MOVE_DOWN\"   // Move piece down\nexport const GAME_OVER  = \"GAME_OVER\"   // The game is over\nexport const RESTART    = \"RESTART\"     // Restart Game\n\nexport const moveRight = () => {\n  return { type: MOVE_RIGHT }\n}\n\nexport const moveLeft = () => {\n  return { type: MOVE_LEFT }\n}\n\nexport const rotate = () => {\n  return { type: ROTATE }\n}\n\nexport const moveDown = () => {\n  return { type: MOVE_DOWN }\n}\n\nexport const pause = () => {\n  return { type: PAUSE }\n}\n\nexport const resume = () => {\n  return { type: RESUME }\n}\n\nexport const restart = () => {\n  return { type: RESTART }\n}","export const random = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min\n}\n\nexport const gridDefault = () => {\n  const rows = 18\n  const cols = 10\n  const array = []\n  for(let row = 0; row < rows; row++) {\n    array.push([])\n    for(let col = 0; col < cols; col++) {\n      array[row].push(0)\n    }\n  }\n\n  // Fill array with 18 arrays each containing\n  // 10 zeros (0)\n\n  return array\n}\n\n// Returns the next rotation for a shape\n// rotation can't exceed the last index of the the rotations for the given shape.\nexport const nextRotation = (shape, rotation) => {\n  return (rotation + 1) % shapes[shape].length\n}\n\nexport const canMoveTo = (shape, grid, x, y, rotation) => {\n  const currentShape = shapes[shape][rotation]\n  // Loop through all rows and cols of the **shape**\n  for (let row = 0; row < currentShape.length; row++) {\n      for (let col = 0; col < currentShape[row].length; col++) {\n          // Look for a 1 here\n          if (currentShape[row][col] !== 0) {\n              // x offset on grid\n              const proposedX = col + x\n              // y offset on grid\n              const proposedY = row + y\n              if (proposedY < 0) {\n                  continue\n              }\n              // Get the row on the grid\n              const possibleRow = grid[proposedY]\n              // Check row exists\n              if (possibleRow) {\n                  // Check if this column in the row is undefined, if it's off the edges, 0, and empty\n                  if (possibleRow[proposedX] === undefined || possibleRow[proposedX] !== 0) {\n                      // undefined or not 0 and it's occupied we can't move here.\n                      return false\n                  }\n              } else {\n                  return false\n              }\n          }\n      }\n  }\n  return true\n}\n\n// Define block shapes and their rotations as arrays.\nexport const shapes = [\n  // none\n  [[[0,0,0,0],\n    [0,0,0,0],\n    [0,0,0,0],\n    [0,0,0,0]]],\n\n  // I\n  [[[0,0,0,0],\n    [1,1,1,1],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0]]],\n\n  // T\n  [[[0,0,0,0],\n    [1,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [1,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]]],\n\n  // L\n  [[[0,0,0,0],\n    [1,1,1,0],\n    [1,0,0,0],\n    [0,0,0,0]],\n\n   [[1,1,0,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,0,1,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [0,1,1,0],\n    [0,0,0,0]]],\n\n  // J\n  [[[1,0,0,0],\n    [1,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]],\n\n   [[0,1,1,0],\n    [0,1,0,0],\n    [0,1,0,0],\n    [0,0,0,0]],\n\n   [[0,0,0,0],\n    [1,1,1,0],\n    [0,0,1,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,0,0],\n    [1,1,0,0],\n    [0,0,0,0]]],\n\n  // Z\n  [[[0,0,0,0],\n    [1,1,0,0],\n    [0,1,1,0],\n    [0,0,0,0]],\n\n   [[0,0,1,0],\n    [0,1,1,0],\n    [0,1,0,0],\n    [0,0,0,0]]],\n\n  // S\n  [[[0,0,0,0],\n    [0,1,1,0],\n    [1,1,0,0],\n    [0,0,0,0]],\n\n   [[0,1,0,0],\n    [0,1,1,0],\n    [0,0,1,0],\n    [0,0,0,0]]],\n\n  // O\n  [[[0,1,1,0],\n    [0,1,1,0],\n    [0,0,0,0],\n    [0,0,0,0]]]\n]\n\n// Adds current shape to grid\n// Adds current shape to grid\nexport const addBlockToGrid = (shape, grid, x, y, rotation) => {\n  // At this point the game is not over\n  let blockOffGrid = false\n  const block = shapes[shape][rotation]\n  const newGrid = [ ...grid ]\n  for (let row = 0; row < block.length; row++) {\n    for (let col = 0; col < block[row].length; col++) {\n      if (block[row][col]) {\n        const yIndex = row + y\n        // If the yIndex is less than 0 part of the block\n        // is off the top of the screen and the game is over\n        if (yIndex < 0) {\n          blockOffGrid = true\n        } else {\n          newGrid[row + y][col + x] = shape\n        }\n      }\n    }\n  }\n  // Return both the newGrid and the gameOver bool                                                \n  return { grid: newGrid, gameOver: blockOffGrid }\n}\n\n// Checks for completed rows and scores points\nexport const checkRows = (grid) => {\n  // Points increase for each row completed\n  // i.e. 40 points for completing one row, 100 points for two rows\n  const points = [0, 40, 100, 300, 1200]\n  let completedRows = 0\n  for (let row = 0; row < grid.length; row++) {\n    // No empty cells means it can't find a 0, so the row must be complete!\n    if (grid[row].indexOf(0) === -1) {\n      completedRows += 1\n      // Remove the row and add a new empty one at the top\n      grid.splice(row, 1)\n      grid.unshift(Array(10).fill(0))\n    }\n  }\n  return points[completedRows]\n}\n\nexport const randomShape = () => {\n  return random(1, shapes.length - 1)\n}\n\nexport const defaultState = () => {\n  return {\n      // Create an empty grid\n      grid: gridDefault(),\n      // Get a new random shape\n      shape: randomShape(),\n      // set rotation of the shape to 0\n      rotation: 0,\n      // set the 'x' position of the shape to 5 and y to -4, which puts the shape in the center of the grid, above the top\n      x: 5,\n      y: -4,\n      // set the index of the next shape to a new random shape\n      nextShape: randomShape(),\n      // Tell the game that it's currently running\n      isRunning: true,\n      // Set the score to 0\n      score: 0,\n      // Set the default speed\n      speed: 1000,\n      // Game isn't over yet\n      gameOver: false\n  }\n}","import {\n  MOVE_RIGHT, MOVE_LEFT, MOVE_DOWN, ROTATE,\n  PAUSE, RESUME, RESTART, GAME_OVER\n} from '../actions'\n\nimport {\n  defaultState,\n  nextRotation,\n  canMoveTo,\n  addBlockToGrid,\n  checkRows,\n  randomShape\n} from '../utils'\n\nconst gameReducer = (state = defaultState(), action) => {\n  const { shape, grid, x, y, rotation, nextShape, score, isRunning } = state\n  \n  switch(action.type) {\n    case ROTATE:\n      const newRotation = nextRotation(shape, rotation)\n      if (canMoveTo(shape, grid, x, y, newRotation)) {\n          return { ...state, rotation: newRotation }\n      }\n      return state\n\n      case MOVE_RIGHT:\n      if (canMoveTo(shape, grid, x + 1, y, rotation)) {\n        return { ...state, x: x + 1 }\n      }\n      return state\n\n      case MOVE_LEFT:\n      // subtract 1 from the x and check if this new position is possible by calling `canMoveTo()\n      if (canMoveTo(shape, grid, x - 1, y, rotation)) {\n          return { ...state, x: x - 1 }\n      }\n      return state\n\n      case MOVE_DOWN:\n  // Get the next potential Y position\n  const maybeY = y + 1\n\n  // Check if the current block can move here\n  if (canMoveTo(shape, grid, x, maybeY, rotation)) {\n      // If so move down don't place the block\n      return { ...state, y: maybeY }\n  }\n\n  // If not place the block\n  // (this returns an object with a grid and gameover bool)\n  const obj = addBlockToGrid(shape, grid, x, y, rotation)\n  const newGrid = obj.grid\n  const gameOver = obj.gameOver\n\n  if (gameOver) {\n    // Game Over\n    const newState = { ...state }\n    newState.shape = 0\n    newState.grid = newGrid\n    return { ...state, gameOver: true }\n  }\n\n  // reset somethings to start a new shape/block\n  const newState = defaultState()\n  newState.grid = newGrid\n  newState.shape = nextShape\n  newState.score = score\n  newState.isRunning = isRunning\n\n  // TODO: Check and Set level\n  // Score increases decrease interval\n  newState.score = score + checkRows(newGrid)\n\n  return newState\n    \n      return newState\n\n      case RESUME:\n\n      return { ...state, isRunning: true }\n\n      case PAUSE:\n\n      return { ...state, isRunning: false }\n\n    case GAME_OVER:\n\n      return state\n\n      case RESTART:\n      return defaultState()\n\n    default:\n      return state\n  }\n}\n\nexport default gameReducer","import { combineReducers } from 'redux'\nimport gameReducer from './gameReducer'\n\nconst reducers = combineReducers({ game: gameReducer })\n\nexport default reducers","import React, { Component } from 'react'\n\nclass GridSquare extends Component {\n  render () {\n    const classes = `grid-square color-${this.props.color}`\n    return <div className={classes} />\n  }\n}\nexport default GridSquare","import React, { Component } from 'react'\nimport GridSquare from './gridSquare'\nimport { connect } from 'react-redux'\nimport { moveDown } from '../actions'\nimport { shapes } from '../utils'\n// Represents a 10 x 18 grid of grid squares\n\nclass GridBoard extends Component {\n  constructor(props) {\n    super(props)\n\n    this.lastUpdateTime = 0\n    this.progressTime = 0\n  }\n\n  componentDidMount() {\n    window.requestAnimationFrame(this.update.bind(this))\n  }\n\n  // Handle game updates\n  update(time) {\n    // If the game is is running we want to request a callback at the next animation frame.\n    window.requestAnimationFrame(this.update.bind(this))\n    if (!this.props.isRunning) {\n      return\n    }\n\n    // If lastUpdateTime not been set, set it to the current time.\n    if (!this.lastUpdateTime) {\n      this.lastUpdateTime = time\n    }\n\n    // Calculate delta time and progress time\n    const deltaTime = time - this.lastUpdateTime\n    this.progressTime += deltaTime\n\n    // If the progress time is greater than speed move the block down\n    if (this.progressTime > this.props.speed) {\n      this.props.moveDown()\n      this.progressTime = 0\n    }\n\n    // set the last update time.\n    this.lastUpdateTime = time\n  }\n\n  makeGrid() {\n    // collect properties mapped to props from state.\n    const { grid, shape, rotation, x, y } = this.props\n    // get the block which is the current shape the player is controlling\n    const block = shapes[shape][rotation]\n    const blockColor = shape\n    // map rows\n    return grid.map((rowArray, row) => {\n      // map columns\n\n      return rowArray.map((square, col) => {\n        // Find the block x and y on the shape grid\n        // By subtracting the x and y from the col and the row we get the position of the upper left corner of the block array as if it was superimposed over the main grid\n        const blockX = col - x\n        const blockY = row - y\n        let color = square\n        // Map current falling block to grid.\n        // For any squares that fall on the grid we need to look at the block array and see if there is a 1 in this case we use the block color. if (blockX >= 0 && blockX < block.length && blockY >= 0 && blockY < block.length) {\n        if (blockX >= 0 && blockX < block.length && blockY >= 0 && blockY < block.length) {\n          color = block[blockY][blockX] === 0 ? color : blockColor\n        }\n        // Generate a unique key for every block\n        const k = row * grid[0].length + col;\n        // Generate a grid square\n        return (<GridSquare\n          key={k}\n          square={square}\n          color={color}>{square}\n        </GridSquare>)\n      })\n    })\n  }\n\n  // The components generated in makeGrid are rendered in div.grid-board\n  render() {\n    return (\n      <div className='grid-board'>\n        {this.makeGrid()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    grid: state.game.grid,\n    shape: state.game.shape,\n    rotation: state.game.rotation,\n    x: state.game.x,\n    y: state.game.y,\n    speed: state.game.speed,\n    isRunning: state.game.isRunning\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    moveDown\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(GridBoard)","import React, { Component } from 'react'\nimport GridSquare from './gridSquare'\nimport { connect } from 'react-redux'\nimport { shapes } from '../utils'\n\n// Draws the \"next\" block view showing the next block to drop\nclass NextBlock extends Component {\n\n  makeGrid() {\n    // deconstruct shape\n    const { shape } = this.props\n    // get the array for this shape first rotation\n    const block = shapes[shape][0]\n    // get the empty shape\n    const box = shapes[0][0]        \n  \n    // Map the block to the grid\n    return box.map((rowArray, row) => {\n      return rowArray.map((square, col) => {\n        // If there is a 1 use the shape index\n        const color = block[row][col] === 0 ? 0 : shape\n        return <GridSquare key={`${row}${col}`} color={color} />\n      })\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"next-block\">\n        {this.makeGrid()}\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    // Return nextShape as shape\n    shape: state.game.nextShape\n  }\n}\n\nexport default connect(mapStateToProps)(NextBlock)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nimport { pause, resume, restart } from '../actions'\n\nclass ScoreBoard extends Component {\n\n  render() {\n    const { isRunning, score, resume, pause, restart, gameOver } = this.props\n\n    return (\n      <div className=\"score-board\">\n        <div>\n          <div>Score:{score}</div>\n          <div>Level: 1</div>\n        </div>\n        <button className=\"score-board-button\" onClick={(e) => {\n          if (gameOver) { return }\n          isRunning ? pause() : resume()\n        }}>{isRunning ? \"Pause\" : \"Resume\"}</button>\n\n        <button className=\"score-board-button\" onClick={(e) => {\n          restart()\n        }}>Restart</button>\n\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    score: state.game.score,\n    isRunning: state.game.isRunning,\n    gameOver: state.game.gameOver\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    pause,\n    resume,\n    restart\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(ScoreBoard)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { moveDown, moveLeft, moveRight, rotate } from '../actions'\n\nclass Controls extends Component {\n\n  render() {\n    const { isRunning, gameOver } = this.props\n\n    return (\n      // for all the below, Notice the function returns if `isRunning` is `false` (`!isRunning`), or (`||`) `gameOver` is `true`.\n      <div className=\"controls\">\n        {/* left */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.moveLeft()\n        }}>Left</button>\n\n        {/* right */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.moveRight()\n        }}>Right</button>\n\n        {/* rotate */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.rotate()\n        }}>Rotate</button>\n\n        {/* down */}\n        <button className=\"control-button\" onClick={(e) => {\n          if (!isRunning || gameOver) { return }\n          this.props.moveDown()\n        }}>Down</button>\n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    isRunning: state.game.isRunning,\n    gameOver: state.game.gameOver\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return {\n    moveRight,\n    moveLeft,\n    moveDown,\n    rotate\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(Controls)","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\n// Displays a message\nclass MessagePopup extends Component {\n\n  render() {\n    const { gameOver, isRunning } = this.props\n    let message = ''\n    let isHidden = 'hidden'\n\n    // If the game is over, show the popup saying \"Game Over\"\n    if (gameOver) {\n      message = 'Game Over'\n      isHidden = ''\n    // If the game isn't running, it must be paused, so show the popup saying \"Paused\"\n    } else if (!isRunning) {\n      message = 'Paused'\n      isHidden = ''\n    // Default message, will still be hidden\n    } else {\n      message = '???'\n    }\n\n    return (\n      <div className={`message-popup ${isHidden}`}>\n        <h1>{message}</h1>\n        <p></p>\n      </div>\n    )\n}\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    gameOver: state.game.gameOver,\n    isRunning: state.game.isRunning\n  }\n}\n\nconst mapDispatchToProps = () => {\n  return { }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps())(MessagePopup)","import React, { Component } from 'react'\nimport { createStore } from 'redux'\n\nimport { Provider } from 'react-redux'\n\nimport reducers from './reducers'\nimport GridBoard from './components/gridBoard'\nimport NextBlock from './components/nextBlock'\nimport ScoreBoard from './components/scoreboard'\nimport Controls from './components/controls'\nimport MessagePopup from './components/messagePopup'\n\nimport './App.css';\n\nconst store = createStore(reducers)\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1 className=\"App-title\">Tetris Redux</h1>\n          </header>\n          <GridBoard />\n          <NextBlock />\n          <ScoreBoard />\n          <Controls />\n          <MessagePopup />\n        </div>\n      </Provider>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}